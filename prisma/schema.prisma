generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
}

model CartItem {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  userId    String @db.ObjectId
  productId String @db.ObjectId
  quantity  Int    @default(1)

  user    User     @relation("UserCartItems", fields: [userId], references: [id], onDelete: Cascade)
  product Products @relation("ProductCartItems", fields: [productId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, productId]) // Composite unique constraint
}

enum OrderStatus {
  PENDING
  DELIVERED
  CANCELLED
  PROCESSING
}

model Order {
  id              String      @id @default(auto()) @map("_id") @db.ObjectId
  userId          String      @db.ObjectId
  paymentIntentId String
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  items           OrderItem[] @relation("OrderItems")
  addressId       String      @db.ObjectId // Reference to Address
  address         Address     @relation("OrderAddress", fields: [addressId], references: [id])
  status          OrderStatus @default(PENDING)

  user User @relation("UserOrders", fields: [userId], references: [id])
}

model OrderItem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String   @db.ObjectId
  productId String   @db.ObjectId
  quantity  Int
  order     Order    @relation("OrderItems", fields: [orderId], references: [id])
  product   Products @relation("ProductOrderItems", fields: [productId], references: [id])
}

model Address {
  id     String  @id @default(auto()) @map("_id") @db.ObjectId
  userId String  @db.ObjectId
  user   User    @relation("UserAddresses", fields: [userId], references: [id])
  orders Order[] @relation("OrderAddress") // Relation to Orders

  name      String
  street    String
  city      String
  state     String
  zipCode   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?         @unique
  hashedPassword String?
  emailVerified  DateTime?
  image          String?
  addresses      Address[]       @relation("UserAddresses")
  accounts       Account[]
  sessions       Session[]
  roles          UserRole?       @default(USER)
  Authenticator  Authenticator[]
  cartItems      CartItem[]      @relation("UserCartItems")
  orders         Order[]         @relation("UserOrders")
  otp            String?
  otpExpiry      DateTime?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  Review         Review[]
}

model Review {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  rating    Int      @default(1) // Rating scale from 1 to 5
  productId String   @db.ObjectId
  userId    String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product Products @relation("ProductReviews", fields: [productId], references: [id], onDelete: Cascade) // Add this relation field
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Products {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  title      String?     @unique
  price      Float?
  category   String?
  images     String[]
  stock      Int
  reviews    Review[]    @relation("ProductReviews") // Relation to reviews
  cartItems  CartItem[]  @relation("ProductCartItems")
  orderItems OrderItem[] @relation("ProductOrderItems")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}
